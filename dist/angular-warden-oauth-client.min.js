!function(){"use strict";angular.module("wardenOAuth",["angular-jwt","webstorageLight","ui.router"]),angular.module("wardenOAuth").run(["$rootScope","$location","$window","$http","$state","Auth",function(){}]).config(["$httpProvider",function(e){e.interceptors.push("authInterceptor"),e.interceptors.push("authExpiredInterceptor")}]),angular.module("wardenOAuth").provider("Auth",function(){var e={clientId:"myApp",loginUrl:"/warden/warden-ui/index.html#/realms/master/oauth/login",accessDeniedHandler:function(){$state.go("accessdenied")}};this.config=function(t){e=t},this.$get=["$rootScope","$state","$window","Principal","JwtTokenService","UrlLocationService",function(t,n,o,r,i,a){var s=null,u=null,l={permissionDenied:function(){r.isAuthenticated()?(console.log("User is signed in but not authorized for desired state!"),e.accessDeniedHandler()):(console.log("User is not authenticated - going to Login!"),this.redirectToLogin())},redirectToLogin:function(){var e=this.getLoginUrl();console.log("Redirecting to OAuth-Login '"+e+"' ..."),o.location.href=e},getLoginUrl:function(){var t;return t=s?n.href(s.name,u,{absolute:!0}):n.href("home",{},{absolute:!0}),this.getOAuthLoginUrl(e.clientId,t)},getOAuthLoginUrl:function(t,n){var o=e.loginUrl+"?response_type=token&client_id="+encodeURIComponent(t)+"&redirect_uri="+encodeURIComponent(n);return o},fetchUrlToken:function(){console.log("Checking if a query url param is set with a token ...");var e=a.parseQueryParams(),t=e.token;return angular.isString(t)&&t.length>10?(console.log("Found JWT in URL: "+t),a.deleteQueryParam("token"),t):null},authenticate:function(){console.log("Trying to authenticate with existing token ...");var e=this.fetchUrlToken();if(e&&(console.log("Persisting token from URL ..."),i.setToken(e)),e=i.getToken()){var t=i.parseIdentity(e);t.isValid()?(r.authenticate(t),console.log("Principal authenticated with: "+JSON.stringify(t)),t.langKey):(r.authenticate(null),console.error("The parsed identity was not valid (token probably expired)!"))}else r.authenticate(null),console.log("No token found, cant authenticate.")},logout:function(){console.log("Logging out..."),i.deleteToken(),r.authenticate(null)},hasPermission:function(e){return e.data&&e.data.roles&&e.data.roles.length>0&&!r.isInAnyRole(e.data.roles)?(console.log("User has not the required web-ui roles: "+JSON.stringify(e.data.roles)+"! Current User: "+JSON.stringify(r)),!1):!0}};return t.$on("$stateChangeStart",function(e,t,n){console.log("auth.service.js - $stateChangeStart"),l.authenticate(),l.hasPermission(t)?console.log("Permission granted for state '"+t.name+"'"):(console.log("User lacks privilege for requested state '"+t.name+"'. Handling ..."),s=t,u=n,e.preventDefault(),l.permissionDenied())}),l}]}),angular.module("wardenOAuth").factory("authInterceptor",["$rootScope","$q","$injector",function(e,t,n){return{request:function(e){e.headers=e.headers||{};try{var t=n.get("Principal");if(t.isAuthenticated()){var o=t.getIdentity();if(o.access_token){var r="Bearer "+o.access_token;e.headers.Authorization=r}else console.log("The current principal identity does not have an access token - cant add bearer token to header!")}else console.log("Can not add bearer token - Not authenticated yet.")}catch(i){console.log("Something went wrong in authInterceptor! "+JSON.stringify(i))}return e}}}]).factory("authExpiredInterceptor",["$rootScope","$q","$injector",function(e,t,n){return{responseError:function(e){if(401===e.status){console.log("Got an 401 Error (Not authorized) from the backend.");var o=n.get("Auth");o.permissionDenied()}return t.reject(e)}}}]),angular.module("wardenOAuth").service("JwtTokenService",["$http","StorageService","jwtHelper",function(e,t,n){this.parseIdentity=function(e){var t=n.decodeToken(e);if(t){var o={access_token:e,expires_at:n.getTokenExpirationDate(e),userLogin:t.sub,name:t.name,realm:t.aud,roles:t.roles,language:t.lang,isValid:function(){return null===this.expires_at?!1:this.expires_at.valueOf()>(new Date).valueOf()}};return o}throw"JWT token has unexpected format, cant parse it!"},this.deleteToken=function(){console.log("Deleting local JWT token..."),this.setToken(null)},this.setToken=function(e){t.save("token",e)},this.getToken=function(){return t.get("token")}}]),angular.module("wardenOAuth").factory("Principal",function(){var e=null;return{getIdentity:function(){return e},isAuthenticated:function(){return e?e.isValid():!1},isAnonymous:function(){return!this.isAuthenticated()},isInRole:function(t){return this.isAuthenticated()&&e.roles?-1!==e.roles.indexOf(t):!1},isInAnyRole:function(t){if(!this.isAuthenticated()||!e.roles)return!1;for(var n=0;n<t.length;n++)if(this.isInRole(t[n]))return!0;return!1},authenticate:function(t){e=t}}}),angular.module("wardenOAuth").factory("UrlLocationService",["$location",function(e){return{parseQueryParams:function(){return e.search()},deleteQueryParam:function(t){console.log("Attempting to delete query param "+t),e.search(t,null)}}}])}();