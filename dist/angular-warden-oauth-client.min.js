!function(){"use strict";angular.module("wardenOAuth",["angular-jwt","webstorageLight","ui.router"]),angular.module("wardenOAuth").run(["$rootScope","$location","$window","$http","$state","Auth",function(e,t,n,o,r,i){}]).config(["$httpProvider",function(e){e.interceptors.push("authInterceptor"),e.interceptors.push("authExpiredInterceptor")}]),angular.module("wardenOAuth").provider("Auth",function(){var e={clientId:"myApp",loginUrl:"/warden/warden-ui/index.html#/realms/master/oauth/login",loginState:null,accessDeniedState:"accessdenied",defaultRedirectState:"home",stateRoleSecurityEnabled:!0};this.config=function(t){e=t},this.$get=["$state","$window","$transitions","Principal","JwtTokenService","UrlLocationService",function(t,n,o,r,i,a){var s=null,u=null,l={redirectToLogin:function(){if(e.loginState){console.log("Sending user to local login state: "+e.loginState);var n={};return s&&(n={desiredStateName:s.name,desiredStateParams:u}),t.go(e.loginState,n),!0}if(e.loginUrl){var o=this.getLoginUrl();return console.log("Redirecting to OAuth-Login '"+o+"' ..."),this._redirectTo(o),!0}return!1},redirectToLogout:function(){var e=this.getLogoutUrl();this._redirectTo(e)},getLogoutUrl:function(){return this.getLoginUrl()+"&action=logout"},getLoginUrl:function(){var t,n={};s?(t=s.name,n=u):t=e.defaultRedirectState;var o=a.getAbsoluteStateUrl(t,n);return this._getOAuthLoginUrl(e.clientId,o)},loginWithJwt:function(e){if(!e)throw"You must provide a JWT token in Auth.loginWithJwt(jwt)";i.setToken(e);var t=i.parseIdentity(e);return t.isValid()?(r.authenticate(t),console.log("Principal authenticated with: "+JSON.stringify(t)),!0):(console.error("The parsed identity was not valid (token probably expired)!"),this.logout(!1),!1)},authenticate:function(){console.log("Trying to authenticate with existing token ...");var e=this._fetchUrlToken();e||(e=i.getToken()),e?this.loginWithJwt(e):(r.authenticate(null),console.log("No token found, cant authenticate."))},logout:function(e){console.log("Logging out..."),i.deleteToken(),r.authenticate(null),e&&this.redirectToLogout()},hasPermission:function(t){return!e.stateRoleSecurityEnabled||(!(t.data&&t.data.roles&&t.data.roles.length>0&&!r.isInAnyRole(t.data.roles))||(console.log("User has not the required web-ui roles: "+JSON.stringify(t.data.roles)+"! Current User: "+JSON.stringify(r)),!1))},_permissionDenied:function(n,o,i,s){if(r.isAuthenticated())if(console.log("User is signed in but not authorized for desired state!"),e.accessDeniedState){var u={desiredState:i.name,desiredStateParams:s,redirectBackUrl:a.getAbsoluteStateUrl(n.name,o)};t.go(e.accessDeniedState,u)}else console.log("No access-denied state has been provided!");else console.log("User is not authenticated - going to Login!"),this.redirectToLogin()},_fetchUrlToken:function(){console.log("Checking if a query url param is set with a token ...");var e=a.parseQueryParams(),t=e.token;return angular.isString(t)&&t.length>10?(console.log("Found JWT in URL: "+t),a.deleteQueryParam("token"),t):null},_getOAuthLoginUrl:function(t,n){var o=e.loginUrl+"?response_type=token&client_id="+encodeURIComponent(t)+"&redirect_uri="+encodeURIComponent(n);return o},_redirectTo:function(e){n.location.href=e}};return o.onBefore({},function(e){return s=e.$to(),u=e.params(),l.authenticate(),!!l.hasPermission(s)||(console.log("User lacks privilege for requested state '"+s.name+"'!"),l._permissionDenied(e.$from(),e.params("from"),e.$to(),e.params()),!1)}),l}]}),angular.module("wardenOAuth").factory("authInterceptor",["$rootScope","$q","$injector",function(e,t,n){return{request:function(e){e.headers=e.headers||{};try{var t=n.get("Principal");if(t.isAuthenticated()){var o=t.getIdentity();if(o.access_token){var r="Bearer "+o.access_token;e.headers.Authorization=r}else console.log("The current principal identity does not have an access token - cant add bearer token to header!")}else console.log("Can not add bearer token - Not authenticated yet.")}catch(e){console.log("Something went wrong in authInterceptor! "+JSON.stringify(e))}return e}}}]).factory("authExpiredInterceptor",["$rootScope","$q","$injector",function(e,t,n){return{responseError:function(e){if(401===e.status){console.log("Got an 401 Error (Not authorized) from the backend.");var o=n.get("Auth");o.permissionDenied()}return t.reject(e)}}}]),angular.module("wardenOAuth").service("JwtTokenService",["$http","StorageService","jwtHelper",function(e,t,n){this.parseIdentity=function(e){var t=n.decodeToken(e);if(t){var o={access_token:e,expires_at:n.getTokenExpirationDate(e),userLogin:t.sub,name:t.name,realm:t.aud,roles:t.roles,language:t.lang,isValid:function(){return null!==this.expires_at&&this.expires_at.valueOf()>(new Date).valueOf()}};return o}throw"JWT token has unexpected format, cant parse it!"},this.deleteToken=function(){console.log("Deleting local JWT token..."),this.setToken(null)},this.setToken=function(e){t.save("token",e)},this.getToken=function(){return t.get("token")}}]),angular.module("wardenOAuth").factory("Principal",function(){var e=null;return{getIdentity:function(){return e},isAuthenticated:function(){return!!e&&e.isValid()},isAnonymous:function(){return!this.isAuthenticated()},isInRole:function(t){return!(!this.isAuthenticated()||!e.roles)&&e.roles.indexOf(t)!==-1},isInAnyRole:function(t){if(!this.isAuthenticated()||!e.roles)return!1;for(var n=0;n<t.length;n++)if(this.isInRole(t[n]))return!0;return!1},authenticate:function(t){e=t}}}),angular.module("wardenOAuth").factory("UrlLocationService",["$location","$state",function(e,t){return{parseQueryParams:function(){return e.search()},deleteQueryParam:function(t){console.log("Attempting to delete query param "+t),e.search(t,null)},getAbsoluteStateUrl:function(e,n){var o=this._absUrlTillHash(),r=t.href(e,n),i=this._trimUntilHash(r);return o+"#"+i},_absUrlTillHash:function(){return window.location.href.split("#",1)[0]},_trimUntilHash:function(e){var t=e.split("#",2);return 1==t.length?t[0]:t[1]}}}])}();